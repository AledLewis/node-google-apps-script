#!/usr/bin/env node
var program = require('commander');
var path = require('path');
var pkg = require('../package.json');
var commands = path.join(__dirname, '../lib/commands');
var target = require(commands + '/target');
var _ = require('lodash');

program
  .version(pkg.version)
  .on('*', function(name) {
    console.log('\''+name+'\' is not a known command.');
    program.outputHelp();
    process.exit(1);
  });

program
  .command('auth <path/to/client/secret.json>')
  .option('-w, --use-webserver [webserver]',
    'Use a local webserver to capture oauth code')
  .option('-p, --port [port]', 'Port to use for webserver')
  .description('Authorize Google API')
  .action(function(clientSecretPath, options) {
    var useWebserver = options.useWebserver !== 'false';
    require(commands + '/auth')(clientSecretPath, useWebserver).then(function() {
      process.exit(0);
    });
  });

program
  .command('init')
  .option('-s, --subdir [subdir]')
  .option('-o, --overwrite')
  .description('Initialize blank project. The external Apps Script project must exist.')
  .alias('project')
  .action(function(options) {
    return require(commands + '/init')(options);
  });

program
  .command('target <command> <target> <fileId>')
  .option('-s, --subdir [subdir]')
  .description('Add a new Deployment Target')
  .action(function(command, t, fileId, options) {
    if (!_.has(target, command)) {
      console.log(command.red + ' is not a valid command for target'.red);
      process.exit(1);
    }
    return target[command](t, fileId, options);
  });

program
  .command('download [fileId] [subdir]')
  .description('Download a Google Apps Script project')
  .action(require(commands + '/download'));

program
  .command('upload [target]')
  .description('Upload back to Google Drive. Run from root of project directory')
  .alias('build')
  .action(require(commands + '/upload'));

program
  .command('add <package>')
  .description('adds a package')
  .action(require(commands + '/getPackage'));

program
  .parse(process.argv);

if (program.args.length < 1 ) {
  console.log('No command specified.');
  program.outputHelp();
  process.exit(2);
}
